points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+1]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+1], col = "red")
}
#+ATC vs -ATC
par(mfrow = c(2,4))
for(j in 1:(length(condition)/2)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", main = condition[j], ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+8]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+8], col = "red")
}
pdf(file = "P4_1", width = 10, height = 10)
par(mfrow = c(4,4))
for(j in 1:length(condition)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", main = condition[j], ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
}
dev.off()
#General
pdf(file = "P4_1.pdf", width = 10, height = 10)
par(mfrow = c(4,4))
for(j in 1:length(condition)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", main = condition[j], ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
}
dev.off()
#General
pdf(file = "P4_1.pdf", width = 14, height = 14)
par(mfrow = c(4,4))
for(j in 1:length(condition)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", main = condition[j], ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
}
dev.off()
#General
pdf(file = "P4_Rep.pdf", width = 14, height = 14)
par(mfrow = c(4,4))
for(j in 1:length(condition)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", main = condition[j], ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
}
dev.off()
#+ATC vs -ATC
pdf(file = "P4_ATC.pdf", width = 14, height = 7)
par(mfrow = c(2,4))
for(j in 1:(length(condition)/2)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595",  ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+8]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+8], col = "red")
}
dev.off()
#+ATC vs -ATC
pdf(file = "P4_ATC.pdf", width = 16, height = 8)
par(mfrow = c(2,4))
for(j in 1:(length(condition)/2)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595",  ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+8]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+8], col = "red")
}
dev.off()
#+/-SAP30
pdf(file = "P4_SAP30.pdf", width = 16, height = 8)
par(mfrow = c(2,4))
for(j in (1:8)*2 -1){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+1]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+1], col = "red")
}
dev.off()
#Libraries
require(pracma)
#Set working directory
setwd("~/OneDrive - Leland Stanford Junior University/Github/Tecan-Analysis/")
#Import well IDs
well.id.file = "SAP30_ananalysis_Plate1_Well_IDs.txt"
x = as.matrix(read.csv(well.id.file, header = F, strip.white = T))
ids = x[2,]
#Import Tecan Data
tecan.file = "2018-05-17_03-56_180508_Adam_Mia_Tecan_3_96_T14.txt"
x = read.csv(tecan.file, skip = 19)
x = x[1:(nrow(x) - 2), ]
#Matix of ODs
od = as.matrix(x[,3:ncol(x)])
#Vector of temperatures
temp = x[,2]
#Vector of Times (s)
y = as.vector(x[,1])
z = strsplit(y, "\t")
time = 1:length(z)
for(i in 1:length(time)){
time[i] = as.numeric(z[[i]][2])
}
#Find the area under the curve
auc = 1:ncol(od)
for(i in 1:ncol(od)){
auc[i] = trapz(time, od[,i])
}
#Compare
cog8_sap30_P = c(1:3, 25:27)
cog8_neg_P = c(4:6, 28:30)
reb1_sap30_P = c(7:9, 31:33)
reb1_neg_P = c(10:12, 34:36)
ret2_sap30_P = c(13:15, 37:39)
ret2_neg_P = c(16:18, 40:42)
neg_sap30_P = cog8_sap30_P + 18
neg_neg_P = cog8_sap30_P + 21
cog8_sap30_N = c(49:51, 73:75)
cog8_neg_N = cog8_sap30_N + 3
reb1_sap30_N = cog8_sap30_N + 6
reb1_neg_N = cog8_sap30_N + 9
ret2_sap30_N = cog8_sap30_N + 12
ret2_neg_N = cog8_sap30_N + 15
neg_sap30_N = cog8_sap30_N + 18
neg_neg_N = cog8_sap30_N + 21
condition = c("cog8_sap30_P", "cog8_neg_P", "reb1_sap30_P", "reb1_neg_P", "ret2_sap30_P", "ret2_neg_P", "neg_sap30_P", "neg_neg_P", "cog8_sap30_N", "cog8_neg_N", "reb1_sap30_N", "reb1_neg_N", "ret2_sap30_N", "ret2_neg_N", "neg_sap30_N", "neg_neg_N" )
#plot
#General
pdf(file = "P3_Rep.pdf", width = 14, height = 14)
par(mfrow = c(4,4))
for(j in 1:length(condition)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", main = condition[j], ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
}
dev.off()
#+ATC vs -ATC
pdf(file = "P3_ATC.pdf", width = 16, height = 8)
par(mfrow = c(2,4))
for(j in 1:(length(condition)/2)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595",  ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+8]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+8], col = "red")
}
dev.off()
#+/-SAP30
pdf(file = "P3_SAP30.pdf", width = 16, height = 8)
par(mfrow = c(2,4))
for(j in (1:8)*2 -1){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+1]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+1], col = "red")
}
dev.off()
#Set working directory
setwd("~/OneDrive - Leland Stanford Junior University/Github/Tecan-Analysis/")
#Import well IDs
well.id.file = "SAP30_ananalysis_Plate1_Well_IDs.txt"
x = as.matrix(read.csv(well.id.file, header = F, strip.white = T))
ids = x[2,]
#Import Tecan Data
tecan.file = "2018-05-17_03-56_180508_Adam_Mia_Tecan_3_96_T14.txt"
x = read.csv(tecan.file, skip = 19)
x = x[1:(nrow(x) - 2), ]
#Matix of ODs
od = as.matrix(x[,3:ncol(x)])
#Vector of temperatures
temp = x[,2]
#Vector of Times (s)
y = as.vector(x[,1])
z = strsplit(y, "\t")
time = 1:length(z)
for(i in 1:length(time)){
time[i] = as.numeric(z[[i]][2])
}
#Find the area under the curve
auc = 1:ncol(od)
for(i in 1:ncol(od)){
auc[i] = trapz(time, od[,i])
}
time
temp
od
dim(od)
#Compare
cog8_sap30_P = c(1:3, 25:27)
cog8_neg_P = c(4:6, 28:30)
reb1_sap30_P = c(7:9, 31:33)
reb1_neg_P = c(10:12, 34:36)
ret2_sap30_P = c(13:15, 37:39)
ret2_neg_P = c(16:18, 40:42)
neg_sap30_P = cog8_sap30_P + 18
neg_neg_P = cog8_sap30_P + 21
cog8_sap30_N = c(49:51, 73:75)
cog8_neg_N = cog8_sap30_N + 3
reb1_sap30_N = cog8_sap30_N + 6
reb1_neg_N = cog8_sap30_N + 9
ret2_sap30_N = cog8_sap30_N + 12
ret2_neg_N = cog8_sap30_N + 15
neg_sap30_N = cog8_sap30_N + 18
neg_neg_N = cog8_sap30_N + 21
condition = c("cog8_sap30_P", "cog8_neg_P", "reb1_sap30_P", "reb1_neg_P", "ret2_sap30_P", "ret2_neg_P", "neg_sap30_P", "neg_neg_P", "cog8_sap30_N", "cog8_neg_N", "reb1_sap30_N", "reb1_neg_N", "ret2_sap30_N", "ret2_neg_N", "neg_sap30_N", "neg_neg_N" )
auc
j =1
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", main = condition[j], ylim = c(0,0.6))
x = eval(parse(text = condition[j]))
x
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", main = condition[j], ylim = c(0,0.6))
od
od[,1]
plot(time, od[,1])
time
Set working directory
setwd("~/OneDrive - Leland Stanford Junior University/Github/Tecan-Analysis/")
#Import well IDs
well.id.file = "SAP30_ananalysis_Plate1_Well_IDs.txt"
x = as.matrix(read.csv(well.id.file, header = F, strip.white = T))
ids = x[2,]
#Import Tecan Data
tecan.file = "2018-05-17_03-56_180508_Adam_Mia_Tecan_3_96_T14.txt"
x = read.csv(tecan.file, skip = 19)
x = x[1:(nrow(x) - 4), ]
#Matix of ODs
od = as.matrix(x[,3:ncol(x)])
#Vector of temperatures
temp = x[,2]
#Vector of Times (s)
y = as.vector(x[,1])
z = strsplit(y, "\t")
time = 1:length(z)
for(i in 1:length(time)){
time[i] = as.numeric(z[[i]][2])
}
#Find the area under the curve
auc = 1:ncol(od)
for(i in 1:ncol(od)){
auc[i] = trapz(time, od[,i])
}
#Compare
cog8_sap30_P = c(1:3, 25:27)
cog8_neg_P = c(4:6, 28:30)
reb1_sap30_P = c(7:9, 31:33)
reb1_neg_P = c(10:12, 34:36)
ret2_sap30_P = c(13:15, 37:39)
ret2_neg_P = c(16:18, 40:42)
neg_sap30_P = cog8_sap30_P + 18
neg_neg_P = cog8_sap30_P + 21
cog8_sap30_N = c(49:51, 73:75)
cog8_neg_N = cog8_sap30_N + 3
reb1_sap30_N = cog8_sap30_N + 6
reb1_neg_N = cog8_sap30_N + 9
ret2_sap30_N = cog8_sap30_N + 12
ret2_neg_N = cog8_sap30_N + 15
neg_sap30_N = cog8_sap30_N + 18
neg_neg_N = cog8_sap30_N + 21
condition = c("cog8_sap30_P", "cog8_neg_P", "reb1_sap30_P", "reb1_neg_P", "ret2_sap30_P", "ret2_neg_P", "neg_sap30_P", "neg_neg_P", "cog8_sap30_N", "cog8_neg_N", "reb1_sap30_N", "reb1_neg_N", "ret2_sap30_N", "ret2_neg_N", "neg_sap30_N", "neg_neg_N" )
#plot
#General
pdf(file = "P3_Rep.pdf", width = 14, height = 14)
par(mfrow = c(4,4))
for(j in 1:length(condition)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", main = condition[j], ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
}
dev.off()
#+ATC vs -ATC
pdf(file = "P4_ATC.pdf", width = 16, height = 8)
par(mfrow = c(2,4))
for(j in 1:(length(condition)/2)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595",  ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+8]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+8], col = "red")
}
dev.off()
#+/-SAP30
pdf(file = "P4_SAP30.pdf", width = 16, height = 8)
par(mfrow = c(2,4))
for(j in (1:8)*2 -1){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+1]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+1], col = "red")
}
dev.off()
time
#plot
#General
pdf(file = "P3_Rep.pdf", width = 14, height = 14)
par(mfrow = c(4,4))
for(j in 1:length(condition)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", main = condition[j], ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
}
dev.off()
#+ATC vs -ATC
pdf(file = "P3_ATC.pdf", width = 16, height = 8)
par(mfrow = c(2,4))
for(j in 1:(length(condition)/2)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595",  ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+8]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+8], col = "red")
}
dev.off()
#+/-SAP30
pdf(file = "P3_SAP30.pdf", width = 16, height = 8)
par(mfrow = c(2,4))
for(j in (1:8)*2 -1){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+1]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+1], col = "red")
}
dev.off()
#Libraries
require(pracma)
#Set working directory
setwd("~/OneDrive - Leland Stanford Junior University/Github/Tecan-Analysis/")
#Import well IDs
well.id.file = "SAP30_ananalysis_Plate1_Well_IDs.txt"
x = as.matrix(read.csv(well.id.file, header = F, strip.white = T))
ids = x[2,]
#Import Tecan Data
tecan.file = "2018-05-21_18-46_180521_Adam_Mia_4_96_T7.txt"
x = read.csv(tecan.file, skip = 19)
x = x[1:(nrow(x) - 2), ]
#Matix of ODs
od = as.matrix(x[,3:ncol(x)])
#Vector of temperatures
temp = x[,2]
#Vector of Times (s)
y = as.vector(x[,1])
z = strsplit(y, "\t")
time = 1:length(z)
for(i in 1:length(time)){
time[i] = as.numeric(z[[i]][2])
}
#Find the area under the curve
auc = 1:ncol(od)
for(i in 1:ncol(od)){
auc[i] = trapz(time, od[,i])
}
#Compare
cog8_sap30_P = c(1:3, 25:27)
cog8_neg_P = c(4:6, 28:30)
reb1_sap30_P = c(7:9, 31:33)
reb1_neg_P = c(10:12, 34:36)
ret2_sap30_P = c(13:15, 37:39)
ret2_neg_P = c(16:18, 40:42)
neg_sap30_P = cog8_sap30_P + 18
neg_neg_P = cog8_sap30_P + 21
cog8_sap30_N = c(49:51, 73:75)
cog8_neg_N = cog8_sap30_N + 3
reb1_sap30_N = cog8_sap30_N + 6
reb1_neg_N = cog8_sap30_N + 9
ret2_sap30_N = cog8_sap30_N + 12
ret2_neg_N = cog8_sap30_N + 15
neg_sap30_N = cog8_sap30_N + 18
neg_neg_N = cog8_sap30_N + 21
condition = c("cog8_sap30_P", "cog8_neg_P", "reb1_sap30_P", "reb1_neg_P", "ret2_sap30_P", "ret2_neg_P", "neg_sap30_P", "neg_neg_P", "cog8_sap30_N", "cog8_neg_N", "reb1_sap30_N", "reb1_neg_N", "ret2_sap30_N", "ret2_neg_N", "neg_sap30_N", "neg_neg_N" )
#plot
#General
pdf(file = "P4_Rep.pdf", width = 14, height = 14)
par(mfrow = c(4,4))
for(j in 1:length(condition)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", main = condition[j], ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
}
dev.off()
#+ATC vs -ATC
pdf(file = "P4_ATC.pdf", width = 16, height = 8)
par(mfrow = c(2,4))
for(j in 1:(length(condition)/2)){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595",  ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+8]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+8], col = "red")
}
dev.off()
#+/-SAP30
pdf(file = "P4_SAP30.pdf", width = 16, height = 8)
par(mfrow = c(2,4))
for(j in (1:8)*2 -1){
x = eval(parse(text = condition[j]))
plot(time/60, od[,x[1]], type = "l" , xlab = "Time (minutes)", ylab = "OD595", ylim = c(0,0.6))
for(i in 2:length(x)){
points(time/60, od[,x[i]], type = "l")
}
x = eval(parse(text = condition[j+1]))
for(i in 1:length(x)){
points(time/60, od[,x[i]], type = "l", col = "red")
}
text(400, 0.6, labels = condition[j])
text(400, 0.55, labels = condition[j+1], col = "red")
}
dev.off()
eval(parse(text = condition[j]))
39*8+30*4+3*2+2*7+6
19*8+32*4+4*2+12
20/858000
10000/(20/858000)
10000*(20/858000)
.2*1e6/5
.2/5
.2*1e6/5000
.2/5000
.2/5000*1e6
.2/5000*1e6/4
5*758/858
5*100/858
4.9*100/858
